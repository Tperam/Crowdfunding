{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * @file subscription.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\"use strict\";\n\nvar _ = require('underscore');\n\nvar errors = require('web3-core-helpers').errors;\n\nvar EventEmitter = require('eventemitter3');\n\nfunction Subscription(options) {\n  EventEmitter.call(this);\n  this.id = null;\n  this.callback = _.identity;\n  this.arguments = null;\n  this.options = {\n    subscription: options.subscription,\n    type: options.type,\n    requestManager: options.requestManager\n  };\n} // INHERIT\n\n\nSubscription.prototype = Object.create(EventEmitter.prototype);\nSubscription.prototype.constructor = Subscription;\n/**\n * Should be used to extract callback from array of arguments. Modifies input param\n *\n * @method extractCallback\n * @param {Array} arguments\n * @return {Function|Null} callback, if exists\n */\n\nSubscription.prototype._extractCallback = function (args) {\n  if (_.isFunction(args[args.length - 1])) {\n    return args.pop(); // modify the args array!\n  }\n};\n/**\n * Should be called to check if the number of arguments is correct\n *\n * @method validateArgs\n * @param {Array} arguments\n * @throws {Error} if it is not\n */\n\n\nSubscription.prototype._validateArgs = function (args) {\n  var subscription = this.options.subscription;\n  if (!subscription) subscription = {};\n  if (!subscription.params) subscription.params = 0;\n\n  if (args.length !== subscription.params) {\n    throw errors.InvalidNumberOfParams(args.length, subscription.params, subscription.subscriptionName);\n  }\n};\n/**\n * Should be called to format input args of method\n *\n * @method formatInput\n * @param {Array}\n * @return {Array}\n */\n\n\nSubscription.prototype._formatInput = function (args) {\n  var subscription = this.options.subscription;\n\n  if (!subscription) {\n    return args;\n  }\n\n  if (!subscription.inputFormatter) {\n    return args;\n  }\n\n  var formattedArgs = subscription.inputFormatter.map(function (formatter, index) {\n    return formatter ? formatter(args[index]) : args[index];\n  });\n  return formattedArgs;\n};\n/**\n * Should be called to format output(result) of method\n *\n * @method formatOutput\n * @param result {Object}\n * @return {Object}\n */\n\n\nSubscription.prototype._formatOutput = function (result) {\n  var subscription = this.options.subscription;\n  return subscription && subscription.outputFormatter && result ? subscription.outputFormatter(result) : result;\n};\n/**\n * Should create payload from given input args\n *\n * @method toPayload\n * @param {Array} args\n * @return {Object}\n */\n\n\nSubscription.prototype._toPayload = function (args) {\n  var params = [];\n  this.callback = this._extractCallback(args) || _.identity;\n\n  if (!this.subscriptionMethod) {\n    this.subscriptionMethod = args.shift(); // replace subscription with given name\n\n    if (this.options.subscription.subscriptionName) {\n      this.subscriptionMethod = this.options.subscription.subscriptionName;\n    }\n  }\n\n  if (!this.arguments) {\n    this.arguments = this._formatInput(args);\n\n    this._validateArgs(this.arguments);\n\n    args = []; // make empty after validation\n  } // re-add subscriptionName\n\n\n  params.push(this.subscriptionMethod);\n  params = params.concat(this.arguments);\n\n  if (args.length) {\n    throw new Error('Only a callback is allowed as parameter on an already instantiated subscription.');\n  }\n\n  return {\n    method: this.options.type + '_subscribe',\n    params: params\n  };\n};\n/**\n * Unsubscribes and clears callbacks\n *\n * @method unsubscribe\n * @return {Object}\n */\n\n\nSubscription.prototype.unsubscribe = function (callback) {\n  this.options.requestManager.removeSubscription(this.id, callback);\n  this.id = null;\n  this.removeAllListeners();\n};\n/**\n * Subscribes and watches for changes\n *\n * @method subscribe\n * @param {String} subscription the subscription\n * @param {Object} options the options object with address topics and fromBlock\n * @return {Object}\n */\n\n\nSubscription.prototype.subscribe = function () {\n  var _this = this;\n\n  var args = Array.prototype.slice.call(arguments);\n\n  var payload = this._toPayload(args);\n\n  if (!payload) {\n    return this;\n  } // throw error, if provider is not set\n\n\n  if (!this.options.requestManager.provider) {\n    setTimeout(function () {\n      var err1 = new Error('No provider set.');\n\n      _this.callback(err1, null, _this);\n\n      _this.emit('error', err1);\n    }, 0);\n    return this;\n  } // throw error, if provider doesnt support subscriptions\n\n\n  if (!this.options.requestManager.provider.on) {\n    setTimeout(function () {\n      var err2 = new Error('The current provider doesn\\'t support subscriptions: ' + _this.options.requestManager.provider.constructor.name);\n\n      _this.callback(err2, null, _this);\n\n      _this.emit('error', err2);\n    }, 0);\n    return this;\n  } // if id is there unsubscribe first\n\n\n  if (this.id) {\n    this.unsubscribe();\n  } // store the params in the options object\n\n\n  this.options.params = payload.params[1]; // get past logs, if fromBlock is available\n\n  if (payload.params[0] === 'logs' && _.isObject(payload.params[1]) && payload.params[1].hasOwnProperty('fromBlock') && isFinite(payload.params[1].fromBlock)) {\n    // send the subscription request\n    // copy the params to avoid race-condition with deletion below this block\n    var blockParams = Object.assign({}, payload.params[1]);\n    this.options.requestManager.send({\n      method: 'eth_getLogs',\n      params: [blockParams]\n    }, function (err, logs) {\n      if (!err) {\n        logs.forEach(function (log) {\n          var output = _this._formatOutput(log);\n\n          _this.callback(null, output, _this);\n\n          _this.emit('data', output);\n        }); // TODO subscribe here? after the past logs?\n      } else {\n        setTimeout(function () {\n          _this.callback(err, null, _this);\n\n          _this.emit('error', err);\n        }, 0);\n      }\n    });\n  } // create subscription\n  // TODO move to separate function? so that past logs can go first?\n\n\n  if (typeof payload.params[1] === 'object') delete payload.params[1].fromBlock;\n  this.options.requestManager.send(payload, function (err, result) {\n    if (!err && result) {\n      _this.id = result;\n      _this.method = payload.params[0];\n\n      _this.emit('connected', result); // call callback on notifications\n\n\n      _this.options.requestManager.addSubscription(_this, function (error, result) {\n        if (!error) {\n          if (!_.isArray(result)) {\n            result = [result];\n          }\n\n          result.forEach(function (resultItem) {\n            var output = _this._formatOutput(resultItem);\n\n            if (_.isFunction(_this.options.subscription.subscriptionHandler)) {\n              return _this.options.subscription.subscriptionHandler.call(_this, output);\n            } else {\n              _this.emit('data', output);\n            } // call the callback, last so that unsubscribe there won't affect the emit above\n\n\n            _this.callback(null, output, _this);\n          });\n        } else {\n          _this.callback(error, false, _this);\n\n          _this.emit('error', error);\n        }\n      });\n    } else {\n      setTimeout(function () {\n        _this.callback(err, false, _this);\n\n        _this.emit('error', err);\n      }, 0);\n    }\n  }); // return an object to cancel the subscription\n\n  return this;\n};\n/**\n * Resubscribe\n *\n * @method resubscribe\n *\n * @returns {void}\n */\n\n\nSubscription.prototype.resubscribe = function () {\n  this.options.requestManager.removeSubscription(this.id); // unsubscribe\n\n  this.id = null;\n  this.subscribe(this.callback);\n};\n\nmodule.exports = Subscription;","map":{"version":3,"sources":["/home/tperam/code/crowdfunding/node_modules/web3-core-subscriptions/src/subscription.js"],"names":["_","require","errors","EventEmitter","Subscription","options","call","id","callback","identity","arguments","subscription","type","requestManager","prototype","Object","create","constructor","_extractCallback","args","isFunction","length","pop","_validateArgs","params","InvalidNumberOfParams","subscriptionName","_formatInput","inputFormatter","formattedArgs","map","formatter","index","_formatOutput","result","outputFormatter","_toPayload","subscriptionMethod","shift","push","concat","Error","method","unsubscribe","removeSubscription","removeAllListeners","subscribe","_this","Array","slice","payload","provider","setTimeout","err1","emit","on","err2","name","isObject","hasOwnProperty","isFinite","fromBlock","blockParams","assign","send","err","logs","forEach","log","output","addSubscription","error","isArray","resultItem","subscriptionHandler","resubscribe","module","exports"],"mappings":"AAAA;;;;;;;;;;;;;;;;;AAgBA;;;;;AAMA;;AAEA,IAAIA,CAAC,GAAGC,OAAO,CAAC,YAAD,CAAf;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,mBAAD,CAAP,CAA6BC,MAA1C;;AACA,IAAIC,YAAY,GAAGF,OAAO,CAAC,eAAD,CAA1B;;AAEA,SAASG,YAAT,CAAsBC,OAAtB,EAA+B;AAC3BF,EAAAA,YAAY,CAACG,IAAb,CAAkB,IAAlB;AAEA,OAAKC,EAAL,GAAU,IAAV;AACA,OAAKC,QAAL,GAAgBR,CAAC,CAACS,QAAlB;AACA,OAAKC,SAAL,GAAiB,IAAjB;AAEA,OAAKL,OAAL,GAAe;AACXM,IAAAA,YAAY,EAAEN,OAAO,CAACM,YADX;AAEXC,IAAAA,IAAI,EAAEP,OAAO,CAACO,IAFH;AAGXC,IAAAA,cAAc,EAAER,OAAO,CAACQ;AAHb,GAAf;AAKH,C,CAED;;;AACAT,YAAY,CAACU,SAAb,GAAyBC,MAAM,CAACC,MAAP,CAAcb,YAAY,CAACW,SAA3B,CAAzB;AACAV,YAAY,CAACU,SAAb,CAAuBG,WAAvB,GAAqCb,YAArC;AAGA;;;;;;;;AAQAA,YAAY,CAACU,SAAb,CAAuBI,gBAAvB,GAA0C,UAAUC,IAAV,EAAgB;AACtD,MAAInB,CAAC,CAACoB,UAAF,CAAaD,IAAI,CAACA,IAAI,CAACE,MAAL,GAAc,CAAf,CAAjB,CAAJ,EAAyC;AACrC,WAAOF,IAAI,CAACG,GAAL,EAAP,CADqC,CAClB;AACtB;AACJ,CAJD;AAMA;;;;;;;;;AAQAlB,YAAY,CAACU,SAAb,CAAuBS,aAAvB,GAAuC,UAAUJ,IAAV,EAAgB;AACnD,MAAIR,YAAY,GAAG,KAAKN,OAAL,CAAaM,YAAhC;AAEA,MAAG,CAACA,YAAJ,EACIA,YAAY,GAAG,EAAf;AAEJ,MAAG,CAACA,YAAY,CAACa,MAAjB,EACIb,YAAY,CAACa,MAAb,GAAsB,CAAtB;;AAEJ,MAAIL,IAAI,CAACE,MAAL,KAAgBV,YAAY,CAACa,MAAjC,EAAyC;AACrC,UAAMtB,MAAM,CAACuB,qBAAP,CACFN,IAAI,CAACE,MADH,EAEFV,YAAY,CAACa,MAFX,EAGFb,YAAY,CAACe,gBAHX,CAAN;AAKH;AACJ,CAhBD;AAkBA;;;;;;;;;AAQAtB,YAAY,CAACU,SAAb,CAAuBa,YAAvB,GAAsC,UAAUR,IAAV,EAAgB;AAClD,MAAIR,YAAY,GAAG,KAAKN,OAAL,CAAaM,YAAhC;;AAEA,MAAI,CAACA,YAAL,EAAmB;AACf,WAAOQ,IAAP;AACH;;AAED,MAAI,CAACR,YAAY,CAACiB,cAAlB,EAAkC;AAC9B,WAAOT,IAAP;AACH;;AAED,MAAIU,aAAa,GAAGlB,YAAY,CAACiB,cAAb,CAA4BE,GAA5B,CAAgC,UAAUC,SAAV,EAAqBC,KAArB,EAA4B;AAC5E,WAAOD,SAAS,GAAGA,SAAS,CAACZ,IAAI,CAACa,KAAD,CAAL,CAAZ,GAA4Bb,IAAI,CAACa,KAAD,CAAhD;AACH,GAFmB,CAApB;AAIA,SAAOH,aAAP;AACH,CAhBD;AAkBA;;;;;;;;;AAQAzB,YAAY,CAACU,SAAb,CAAuBmB,aAAvB,GAAuC,UAAUC,MAAV,EAAkB;AACrD,MAAIvB,YAAY,GAAG,KAAKN,OAAL,CAAaM,YAAhC;AAEA,SAAQA,YAAY,IAAIA,YAAY,CAACwB,eAA7B,IAAgDD,MAAjD,GAA2DvB,YAAY,CAACwB,eAAb,CAA6BD,MAA7B,CAA3D,GAAkGA,MAAzG;AACH,CAJD;AAMA;;;;;;;;;AAOA9B,YAAY,CAACU,SAAb,CAAuBsB,UAAvB,GAAoC,UAAUjB,IAAV,EAAgB;AAChD,MAAIK,MAAM,GAAG,EAAb;AACA,OAAKhB,QAAL,GAAgB,KAAKU,gBAAL,CAAsBC,IAAtB,KAA+BnB,CAAC,CAACS,QAAjD;;AAEA,MAAI,CAAC,KAAK4B,kBAAV,EAA8B;AAC1B,SAAKA,kBAAL,GAA0BlB,IAAI,CAACmB,KAAL,EAA1B,CAD0B,CAG1B;;AACA,QAAI,KAAKjC,OAAL,CAAaM,YAAb,CAA0Be,gBAA9B,EAAgD;AAC5C,WAAKW,kBAAL,GAA0B,KAAKhC,OAAL,CAAaM,YAAb,CAA0Be,gBAApD;AACH;AACJ;;AAED,MAAI,CAAC,KAAKhB,SAAV,EAAqB;AACjB,SAAKA,SAAL,GAAiB,KAAKiB,YAAL,CAAkBR,IAAlB,CAAjB;;AACA,SAAKI,aAAL,CAAmB,KAAKb,SAAxB;;AACAS,IAAAA,IAAI,GAAG,EAAP,CAHiB,CAGN;AAEd,GAlB+C,CAoBhD;;;AACAK,EAAAA,MAAM,CAACe,IAAP,CAAY,KAAKF,kBAAjB;AACAb,EAAAA,MAAM,GAAGA,MAAM,CAACgB,MAAP,CAAc,KAAK9B,SAAnB,CAAT;;AAGA,MAAIS,IAAI,CAACE,MAAT,EAAiB;AACb,UAAM,IAAIoB,KAAJ,CAAU,kFAAV,CAAN;AACH;;AAED,SAAO;AACHC,IAAAA,MAAM,EAAE,KAAKrC,OAAL,CAAaO,IAAb,GAAoB,YADzB;AAEHY,IAAAA,MAAM,EAAEA;AAFL,GAAP;AAIH,CAjCD;AAmCA;;;;;;;;AAMApB,YAAY,CAACU,SAAb,CAAuB6B,WAAvB,GAAqC,UAASnC,QAAT,EAAmB;AACpD,OAAKH,OAAL,CAAaQ,cAAb,CAA4B+B,kBAA5B,CAA+C,KAAKrC,EAApD,EAAwDC,QAAxD;AACA,OAAKD,EAAL,GAAU,IAAV;AACA,OAAKsC,kBAAL;AACH,CAJD;AAMA;;;;;;;;;;AAQAzC,YAAY,CAACU,SAAb,CAAuBgC,SAAvB,GAAmC,YAAW;AAC1C,MAAIC,KAAK,GAAG,IAAZ;;AACA,MAAI5B,IAAI,GAAG6B,KAAK,CAAClC,SAAN,CAAgBmC,KAAhB,CAAsB3C,IAAtB,CAA2BI,SAA3B,CAAX;;AACA,MAAIwC,OAAO,GAAG,KAAKd,UAAL,CAAgBjB,IAAhB,CAAd;;AAEA,MAAG,CAAC+B,OAAJ,EAAa;AACT,WAAO,IAAP;AACH,GAPyC,CAS1C;;;AACA,MAAG,CAAC,KAAK7C,OAAL,CAAaQ,cAAb,CAA4BsC,QAAhC,EAA0C;AACtCC,IAAAA,UAAU,CAAC,YAAU;AACjB,UAAIC,IAAI,GAAG,IAAIZ,KAAJ,CAAU,kBAAV,CAAX;;AACAM,MAAAA,KAAK,CAACvC,QAAN,CAAe6C,IAAf,EAAqB,IAArB,EAA2BN,KAA3B;;AACAA,MAAAA,KAAK,CAACO,IAAN,CAAW,OAAX,EAAoBD,IAApB;AACH,KAJS,EAIR,CAJQ,CAAV;AAMA,WAAO,IAAP;AACH,GAlByC,CAoB1C;;;AACA,MAAG,CAAC,KAAKhD,OAAL,CAAaQ,cAAb,CAA4BsC,QAA5B,CAAqCI,EAAzC,EAA6C;AACzCH,IAAAA,UAAU,CAAC,YAAU;AACjB,UAAII,IAAI,GAAG,IAAIf,KAAJ,CACP,0DACAM,KAAK,CAAC1C,OAAN,CAAcQ,cAAd,CAA6BsC,QAA7B,CAAsClC,WAAtC,CAAkDwC,IAF3C,CAAX;;AAIAV,MAAAA,KAAK,CAACvC,QAAN,CAAegD,IAAf,EAAqB,IAArB,EAA2BT,KAA3B;;AACAA,MAAAA,KAAK,CAACO,IAAN,CAAW,OAAX,EAAoBE,IAApB;AACH,KAPS,EAOR,CAPQ,CAAV;AASA,WAAO,IAAP;AACH,GAhCyC,CAkC1C;;;AACA,MAAI,KAAKjD,EAAT,EAAa;AACT,SAAKoC,WAAL;AACH,GArCyC,CAuC1C;;;AACA,OAAKtC,OAAL,CAAamB,MAAb,GAAsB0B,OAAO,CAAC1B,MAAR,CAAe,CAAf,CAAtB,CAxC0C,CA0C1C;;AACA,MAAG0B,OAAO,CAAC1B,MAAR,CAAe,CAAf,MAAsB,MAAtB,IAAgCxB,CAAC,CAAC0D,QAAF,CAAWR,OAAO,CAAC1B,MAAR,CAAe,CAAf,CAAX,CAAhC,IAAiE0B,OAAO,CAAC1B,MAAR,CAAe,CAAf,EAAkBmC,cAAlB,CAAiC,WAAjC,CAAjE,IAAkHC,QAAQ,CAACV,OAAO,CAAC1B,MAAR,CAAe,CAAf,EAAkBqC,SAAnB,CAA7H,EAA4J;AACxJ;AAEA;AACA,QAAIC,WAAW,GAAG/C,MAAM,CAACgD,MAAP,CAAc,EAAd,EAAkBb,OAAO,CAAC1B,MAAR,CAAe,CAAf,CAAlB,CAAlB;AAEA,SAAKnB,OAAL,CAAaQ,cAAb,CAA4BmD,IAA5B,CAAiC;AAC7BtB,MAAAA,MAAM,EAAE,aADqB;AAE7BlB,MAAAA,MAAM,EAAE,CAACsC,WAAD;AAFqB,KAAjC,EAGG,UAAUG,GAAV,EAAeC,IAAf,EAAqB;AACpB,UAAG,CAACD,GAAJ,EAAS;AACLC,QAAAA,IAAI,CAACC,OAAL,CAAa,UAASC,GAAT,EAAa;AACtB,cAAIC,MAAM,GAAGtB,KAAK,CAACd,aAAN,CAAoBmC,GAApB,CAAb;;AACArB,UAAAA,KAAK,CAACvC,QAAN,CAAe,IAAf,EAAqB6D,MAArB,EAA6BtB,KAA7B;;AACAA,UAAAA,KAAK,CAACO,IAAN,CAAW,MAAX,EAAmBe,MAAnB;AACH,SAJD,EADK,CAOL;AAEH,OATD,MASO;AACHjB,QAAAA,UAAU,CAAC,YAAU;AACjBL,UAAAA,KAAK,CAACvC,QAAN,CAAeyD,GAAf,EAAoB,IAApB,EAA0BlB,KAA1B;;AACAA,UAAAA,KAAK,CAACO,IAAN,CAAW,OAAX,EAAoBW,GAApB;AACH,SAHS,EAGR,CAHQ,CAAV;AAIH;AACJ,KAnBD;AAoBH,GArEyC,CAuE1C;AACA;;;AAEA,MAAG,OAAOf,OAAO,CAAC1B,MAAR,CAAe,CAAf,CAAP,KAA6B,QAAhC,EACI,OAAO0B,OAAO,CAAC1B,MAAR,CAAe,CAAf,EAAkBqC,SAAzB;AAEJ,OAAKxD,OAAL,CAAaQ,cAAb,CAA4BmD,IAA5B,CAAiCd,OAAjC,EAA0C,UAAUe,GAAV,EAAe/B,MAAf,EAAuB;AAC7D,QAAG,CAAC+B,GAAD,IAAQ/B,MAAX,EAAmB;AACfa,MAAAA,KAAK,CAACxC,EAAN,GAAW2B,MAAX;AACAa,MAAAA,KAAK,CAACL,MAAN,GAAeQ,OAAO,CAAC1B,MAAR,CAAe,CAAf,CAAf;;AACAuB,MAAAA,KAAK,CAACO,IAAN,CAAW,WAAX,EAAwBpB,MAAxB,EAHe,CAKf;;;AACAa,MAAAA,KAAK,CAAC1C,OAAN,CAAcQ,cAAd,CAA6ByD,eAA7B,CAA6CvB,KAA7C,EAAoD,UAASwB,KAAT,EAAgBrC,MAAhB,EAAwB;AACxE,YAAI,CAACqC,KAAL,EAAY;AACR,cAAI,CAACvE,CAAC,CAACwE,OAAF,CAAUtC,MAAV,CAAL,EAAwB;AACpBA,YAAAA,MAAM,GAAG,CAACA,MAAD,CAAT;AACH;;AAEDA,UAAAA,MAAM,CAACiC,OAAP,CAAe,UAASM,UAAT,EAAqB;AAChC,gBAAIJ,MAAM,GAAGtB,KAAK,CAACd,aAAN,CAAoBwC,UAApB,CAAb;;AAEA,gBAAIzE,CAAC,CAACoB,UAAF,CAAa2B,KAAK,CAAC1C,OAAN,CAAcM,YAAd,CAA2B+D,mBAAxC,CAAJ,EAAkE;AAC9D,qBAAO3B,KAAK,CAAC1C,OAAN,CAAcM,YAAd,CAA2B+D,mBAA3B,CAA+CpE,IAA/C,CAAoDyC,KAApD,EAA2DsB,MAA3D,CAAP;AACH,aAFD,MAEO;AACHtB,cAAAA,KAAK,CAACO,IAAN,CAAW,MAAX,EAAmBe,MAAnB;AACH,aAP+B,CAShC;;;AACAtB,YAAAA,KAAK,CAACvC,QAAN,CAAe,IAAf,EAAqB6D,MAArB,EAA6BtB,KAA7B;AACH,WAXD;AAYH,SAjBD,MAiBO;AACHA,UAAAA,KAAK,CAACvC,QAAN,CAAe+D,KAAf,EAAsB,KAAtB,EAA6BxB,KAA7B;;AACAA,UAAAA,KAAK,CAACO,IAAN,CAAW,OAAX,EAAoBiB,KAApB;AACH;AACJ,OAtBD;AAuBH,KA7BD,MA6BO;AACHnB,MAAAA,UAAU,CAAC,YAAU;AACjBL,QAAAA,KAAK,CAACvC,QAAN,CAAeyD,GAAf,EAAoB,KAApB,EAA2BlB,KAA3B;;AACAA,QAAAA,KAAK,CAACO,IAAN,CAAW,OAAX,EAAoBW,GAApB;AACH,OAHS,EAGR,CAHQ,CAAV;AAIH;AACJ,GApCD,EA7E0C,CAmH1C;;AACA,SAAO,IAAP;AACH,CArHD;AAuHA;;;;;;;;;AAOA7D,YAAY,CAACU,SAAb,CAAuB6D,WAAvB,GAAqC,YAAY;AAC7C,OAAKtE,OAAL,CAAaQ,cAAb,CAA4B+B,kBAA5B,CAA+C,KAAKrC,EAApD,EAD6C,CACY;;AACzD,OAAKA,EAAL,GAAU,IAAV;AAEA,OAAKuC,SAAL,CAAe,KAAKtC,QAApB;AACH,CALD;;AAOAoE,MAAM,CAACC,OAAP,GAAiBzE,YAAjB","sourcesContent":["/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file subscription.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\nvar _ = require('underscore');\nvar errors = require('web3-core-helpers').errors;\nvar EventEmitter = require('eventemitter3');\n\nfunction Subscription(options) {\n    EventEmitter.call(this);\n\n    this.id = null;\n    this.callback = _.identity;\n    this.arguments = null;\n\n    this.options = {\n        subscription: options.subscription,\n        type: options.type,\n        requestManager: options.requestManager\n    };\n}\n\n// INHERIT\nSubscription.prototype = Object.create(EventEmitter.prototype);\nSubscription.prototype.constructor = Subscription;\n\n\n/**\n * Should be used to extract callback from array of arguments. Modifies input param\n *\n * @method extractCallback\n * @param {Array} arguments\n * @return {Function|Null} callback, if exists\n */\n\nSubscription.prototype._extractCallback = function (args) {\n    if (_.isFunction(args[args.length - 1])) {\n        return args.pop(); // modify the args array!\n    }\n};\n\n/**\n * Should be called to check if the number of arguments is correct\n *\n * @method validateArgs\n * @param {Array} arguments\n * @throws {Error} if it is not\n */\n\nSubscription.prototype._validateArgs = function (args) {\n    var subscription = this.options.subscription;\n\n    if(!subscription)\n        subscription = {};\n\n    if(!subscription.params)\n        subscription.params = 0;\n\n    if (args.length !== subscription.params) {\n        throw errors.InvalidNumberOfParams(\n            args.length,\n            subscription.params,\n            subscription.subscriptionName\n        );\n    }\n};\n\n/**\n * Should be called to format input args of method\n *\n * @method formatInput\n * @param {Array}\n * @return {Array}\n */\n\nSubscription.prototype._formatInput = function (args) {\n    var subscription = this.options.subscription;\n\n    if (!subscription) {\n        return args;\n    }\n\n    if (!subscription.inputFormatter) {\n        return args;\n    }\n\n    var formattedArgs = subscription.inputFormatter.map(function (formatter, index) {\n        return formatter ? formatter(args[index]) : args[index];\n    });\n\n    return formattedArgs;\n};\n\n/**\n * Should be called to format output(result) of method\n *\n * @method formatOutput\n * @param result {Object}\n * @return {Object}\n */\n\nSubscription.prototype._formatOutput = function (result) {\n    var subscription = this.options.subscription;\n\n    return (subscription && subscription.outputFormatter && result) ? subscription.outputFormatter(result) : result;\n};\n\n/**\n * Should create payload from given input args\n *\n * @method toPayload\n * @param {Array} args\n * @return {Object}\n */\nSubscription.prototype._toPayload = function (args) {\n    var params = [];\n    this.callback = this._extractCallback(args) || _.identity;\n\n    if (!this.subscriptionMethod) {\n        this.subscriptionMethod = args.shift();\n\n        // replace subscription with given name\n        if (this.options.subscription.subscriptionName) {\n            this.subscriptionMethod = this.options.subscription.subscriptionName;\n        }\n    }\n\n    if (!this.arguments) {\n        this.arguments = this._formatInput(args);\n        this._validateArgs(this.arguments);\n        args = []; // make empty after validation\n\n    }\n\n    // re-add subscriptionName\n    params.push(this.subscriptionMethod);\n    params = params.concat(this.arguments);\n\n\n    if (args.length) {\n        throw new Error('Only a callback is allowed as parameter on an already instantiated subscription.');\n    }\n\n    return {\n        method: this.options.type + '_subscribe',\n        params: params\n    };\n};\n\n/**\n * Unsubscribes and clears callbacks\n *\n * @method unsubscribe\n * @return {Object}\n */\nSubscription.prototype.unsubscribe = function(callback) {\n    this.options.requestManager.removeSubscription(this.id, callback);\n    this.id = null;\n    this.removeAllListeners();\n};\n\n/**\n * Subscribes and watches for changes\n *\n * @method subscribe\n * @param {String} subscription the subscription\n * @param {Object} options the options object with address topics and fromBlock\n * @return {Object}\n */\nSubscription.prototype.subscribe = function() {\n    var _this = this;\n    var args = Array.prototype.slice.call(arguments);\n    var payload = this._toPayload(args);\n\n    if(!payload) {\n        return this;\n    }\n\n    // throw error, if provider is not set\n    if(!this.options.requestManager.provider) {\n        setTimeout(function(){\n            var err1 = new Error('No provider set.');\n            _this.callback(err1, null, _this);\n            _this.emit('error', err1);\n        },0);\n\n        return this;\n    }\n\n    // throw error, if provider doesnt support subscriptions\n    if(!this.options.requestManager.provider.on) {\n        setTimeout(function(){\n            var err2 = new Error(\n                'The current provider doesn\\'t support subscriptions: ' +\n                _this.options.requestManager.provider.constructor.name\n            );\n            _this.callback(err2, null, _this);\n            _this.emit('error', err2);\n        },0);\n\n        return this;\n    }\n\n    // if id is there unsubscribe first\n    if (this.id) {\n        this.unsubscribe();\n    }\n\n    // store the params in the options object\n    this.options.params = payload.params[1];\n\n    // get past logs, if fromBlock is available\n    if(payload.params[0] === 'logs' && _.isObject(payload.params[1]) && payload.params[1].hasOwnProperty('fromBlock') && isFinite(payload.params[1].fromBlock)) {\n        // send the subscription request\n\n        // copy the params to avoid race-condition with deletion below this block\n        var blockParams = Object.assign({}, payload.params[1]);\n\n        this.options.requestManager.send({\n            method: 'eth_getLogs',\n            params: [blockParams]\n        }, function (err, logs) {\n            if(!err) {\n                logs.forEach(function(log){\n                    var output = _this._formatOutput(log);\n                    _this.callback(null, output, _this);\n                    _this.emit('data', output);\n                });\n\n                // TODO subscribe here? after the past logs?\n\n            } else {\n                setTimeout(function(){\n                    _this.callback(err, null, _this);\n                    _this.emit('error', err);\n                },0);\n            }\n        });\n    }\n\n    // create subscription\n    // TODO move to separate function? so that past logs can go first?\n\n    if(typeof payload.params[1] === 'object')\n        delete payload.params[1].fromBlock;\n\n    this.options.requestManager.send(payload, function (err, result) {\n        if(!err && result) {\n            _this.id = result;\n            _this.method = payload.params[0];\n            _this.emit('connected', result);\n\n            // call callback on notifications\n            _this.options.requestManager.addSubscription(_this, function(error, result) {\n                if (!error) {\n                    if (!_.isArray(result)) {\n                        result = [result];\n                    }\n\n                    result.forEach(function(resultItem) {\n                        var output = _this._formatOutput(resultItem);\n\n                        if (_.isFunction(_this.options.subscription.subscriptionHandler)) {\n                            return _this.options.subscription.subscriptionHandler.call(_this, output);\n                        } else {\n                            _this.emit('data', output);\n                        }\n\n                        // call the callback, last so that unsubscribe there won't affect the emit above\n                        _this.callback(null, output, _this);\n                    });\n                } else {\n                    _this.callback(error, false, _this);\n                    _this.emit('error', error);\n                }\n            });\n        } else {\n            setTimeout(function(){\n                _this.callback(err, false, _this);\n                _this.emit('error', err);\n            },0);\n        }\n    });\n\n    // return an object to cancel the subscription\n    return this;\n};\n\n/**\n * Resubscribe\n *\n * @method resubscribe\n *\n * @returns {void}\n */\nSubscription.prototype.resubscribe = function () {\n    this.options.requestManager.removeSubscription(this.id); // unsubscribe\n    this.id = null;\n\n    this.subscribe(this.callback);\n};\n\nmodule.exports = Subscription;\n"]},"metadata":{},"sourceType":"script"}